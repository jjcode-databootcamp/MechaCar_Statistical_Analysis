?<name of function or object>
install.packages("tidyverse")
install.packages("jsonlite")
setwd("~/JayDocuments/Databoot-Camp/Homework/module15_r/R_Analysis")
source("~/JayDocuments/Databoot-Camp/Homework/module15_r/test_r/r_analysis_practice.R")
setwd("~/JayDocuments/Databoot-Camp/Homework/module15_r/R_Analysis/01_Demo folder")
x <- 3
source("~/JayDocuments/Databoot-Camp/Homework/module15_r/test_r/r_analysis_practice.R")
source("~/JayDocuments/Databoot-Camp/Homework/module15_r/test_r/r_analysis_practice.R")
x <- 3
numlist <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
source("~/JayDocuments/Databoot-Camp/Homework/module15_r/R_Analysis/01_Demo folder/r_analysis_practice.R")
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
?fromJSON()
library(jsonlite)
?fromJSON()
source("~/JayDocuments/Databoot-Camp/Homework/module15_r/R_Analysis/01_Demo folder/r_analysis_practice.R")
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
source("~/JayDocuments/Databoot-Camp/Homework/module15_r/R_Analysis/01_Demo folder/r_analysis_practice.R")
demo_table[3,"Year"]
demo_table[3,3]
demo_table$"Vehicle_Class"
demo_table$"Vehicle_Class"[2]
library(tidyverse)
library(tidyverse)
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data frame
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data frame
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep') #create summary table
source("~/JayDocuments/Databoot-Camp/Homework/module15_r/R_Analysis/01_Demo/r_analysis_practice.R")
setwd("~/JayDocuments/Databoot-Camp/Homework/module15_r/R_Analysis/MechaCar_Statistical_Analysis")
#1. Download the dplyr package using the library(). dplyr package provides various important functions that can be used for Data Manipulation such as filter()
library(dplyr)
# 1a. Load the dplyr package
library(dplyr)
# 1b. Load the tidyverse package
library(tidyverse)
# 2. Import and read in the MechaCar_mpg.csv file as a dataframe.
mecha_mpg <- read.csv(file='./Resources/Data/MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
# 1a. Load the dplyr package
library(dplyr)
# 1b. Load the tidyverse package
library(tidyverse)
# 2. Import and read in the MechaCar_mpg.csv file as a dataframe.
mecha_mpg <- read.csv(file='./Resources/Data/MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
# 3. Run linear regression on all six variables(i.e., columns), and add the dataframe as the data parameter.
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mecha_mpg)
# 6. Using the summary() function, determine the p-value and the r-squared value for the linear regression model.
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mecha_mpg))
# Optional step:
lm(mpg ~ vehicle_length + ground_clearance, data=mecha_mpg)
summary(lm(mpg ~ vehicle_length + ground_clearance, data=mecha_mpg))
# Optional step:
lm(mpg ~ vehicle_length + ground_clearance, data=mecha_mpg)
summary(lm(mpg ~ vehicle_length + ground_clearance, data=mecha_mpg))
#2. Import and read in the Suspension_Coil.csv file as a table
mecha_coil <- read.csv(file='./Resources/Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
#2. Import and read in the Suspension_Coil.csv file as a table
mecha_coil <- read.csv(file='./Resources/Data/Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
#2. Import and read in the Suspension_Coil.csv file as a table
mecha_coil <- read.csv(file='./Resources/Data/Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
# 2. Create a total_summary dataframe in order to derive mean, median, variance, and standard deviation of the suspension coil’s PSI column
total_summary <- mecha_coil %>% summarize(Mean_PSI=mean(PSI),
Median_PSI=median(PSI),
Var_PSI=var(PSI),
Std_Dev_PSI=sd(PSI),
Num_Coil=n(), .groups = 'keep')
# 2. Create a total_summary dataframe in order to derive mean, median, variance, and standard deviation of the suspension coil’s PSI column
total_summary <- mecha_coil %>% summarize(Mean_PSI=mean(PSI),
Median_PSI=median(PSI),
Var_PSI=var(PSI),
Std_Dev_PSI=sd(PSI),
groups = 'keep')
# 3. Create a lot_summary dataframe in order to to group each manufacturing lot by the mean, median, variance, and standard deviation of the suspension coil’s PSI column.
lot_summary <- mecha_coil  %>% group_by(Manufacturing_Lot) %>% summarize(Mean_PSI=mean(PSI),
Median_PSI=median(PSI),
Var_PSI=var(PSI),
Std_Dev_PSI=sd(PSI),
Num_Coil=n(), .groups = 'keep')
# box plot: PSI each indicdiual Lot
plt2 <- ggplot(mecha_coil,aes(x=Manufacturing_Lot,y=PSI)) #import dataset into ggplot2
plt2 + geom_boxplot()
# 4. Graph Box plot PSI Whole lot
plt1 <- ggplot(mecha_coil,aes(y=PSI)) #import dataset into ggplot2
plt1 + geom_boxplot() #add boxplot
View(lot_summary)
View(lot_summary)
View(total_summary)
View(total_summary)
# 2. Use the t.test() function and its subset() argument to determine if the PSI for each manufacturing lot is statistically different from the population mean of 1,500 pounds per square inch.
# create the functions
lot1 <- subset(mecha_coil, Manufacturing_Lot=="Lot1")
lot2 <- subset(mecha_coil, Manufacturing_Lot=="Lot2")
lot3 <- subset(mecha_coil, Manufacturing_Lot=="Lot3")
# envoke the functions
t.test(lot1$PSI,mu=1500)
t.test(lot2$PSI,mu=1500)
t.test(lot3$PSI,mu=1500)
# 6. Using the summary() function, determine the p-value and the r-squared value for the linear regression model.
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mecha_mpg))
# 3. Run linear regression on all six variables(i.e., columns), and add the dataframe as the data parameter.
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mecha_mpg)
# 2. Create a total_summary dataframe in order to derive mean, median, variance, and standard deviation of the suspension coil’s PSI column
total_summary <- mecha_coil %>% summarize(Mean_PSI=mean(PSI),
Median_PSI=median(PSI),
Var_PSI=var(PSI),
Std_Dev_PSI=sd(PSI),
Num_Coil=n(), .groups = 'keep')
# box plot: PSI each individual Lot
plt2 <- ggplot(mecha_coil,aes(x=Manufacturing_Lot,y=PSI)) #import dataset into ggplot2
plt2 + geom_boxplot()
# 4. Using the summary() function, determine the p-value and the r-squared value for the linear regression model.
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mecha_mpg))
# Optional Steps: Remove the independent variables that have little impact on predicting mpg to see impact
lm(mpg ~ vehicle_length + ground_clearance, data=mecha_mpg)
summary(lm(mpg ~ vehicle_length + ground_clearance, data=mecha_mpg))
# 4a. Graph Box plot PSI Whole lot
plt1 <- ggplot(mecha_coil,aes(y=PSI)) #import dataset into ggplot2
plt1 + geom_boxplot() #add boxplot
# 4b. Graph box plot: PSI each individual Lot
plt2 <- ggplot(mecha_coil,aes(x=Manufacturing_Lot,y=PSI)) #import dataset into ggplot2
plt2 + geom_boxplot()
